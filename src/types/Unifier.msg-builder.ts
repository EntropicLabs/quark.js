/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Decimal, Addr, Denom, InstantiateMsg, ExecuteMsg, Uint128, RewardsMsg, CallbackData, CallbackData1, CallbackData2, CallbackData3, CrankMsg, Coin, Signature, ConfigUpdate, StakeMsg, UnstakeMsg, ClaimRewardsMsg, DistributeRewardsMsg, QueryMsg, ConfigResponse, PendingRewardsResponse, PendingSwapResponse, StakeInfoResponse } from "./Unifier.types";
import { CamelCasedProperties } from "type-fest";
export abstract class UnifierExecuteMsgBuilder {
  static crank = ({
    funds,
    signature,
    stages
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    crank: unknown;
  }>["crank"]>): ExecuteMsg => {
    return {
      crank: ({
        funds,
        signature,
        stages
      } as const)
    };
  };
  static updateConfig = ({
    crankWindow,
    fees,
    finMultiContract,
    newSwapOracles,
    owner,
    removeSwapOracles,
    rewardsContract,
    targetDenom
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    update_config: unknown;
  }>["update_config"]>): ExecuteMsg => {
    return {
      update_config: ({
        crank_window: crankWindow,
        fees,
        fin_multi_contract: finMultiContract,
        new_swap_oracles: newSwapOracles,
        owner,
        remove_swap_oracles: removeSwapOracles,
        rewards_contract: rewardsContract,
        target_denom: targetDenom
      } as const)
    };
  };
  static triggerDistribution = (): ExecuteMsg => {
    return {
      trigger_distribution: ({} as const)
    };
  };
  static rewards = (rewardsMsg: RewardsMsg): ExecuteMsg => {
    return {
      rewards: rewardsMsg
    };
  };
}
export abstract class UnifierQueryMsgBuilder {
  static pendingSwaps = (): QueryMsg => {
    return {
      pending_swaps: ({} as const)
    };
  };
  static config = (): QueryMsg => {
    return {
      config: ({} as const)
    };
  };
  static pendingRewards = ({
    staker
  }: CamelCasedProperties<Extract<QueryMsg, {
    pending_rewards: unknown;
  }>["pending_rewards"]>): QueryMsg => {
    return {
      pending_rewards: ({
        staker
      } as const)
    };
  };
  static stakeInfo = ({
    staker
  }: CamelCasedProperties<Extract<QueryMsg, {
    stake_info: unknown;
  }>["stake_info"]>): QueryMsg => {
    return {
      stake_info: ({
        staker
      } as const)
    };
  };
}