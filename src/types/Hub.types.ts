/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Decimal = string;
export type Addr = string;
export type AdapterOptions = {
  native: {
    collector_cw1: Addr;
    unbonding_period: Duration;
    validators: string[];
  };
} | {
  cw4_funds: {
    cw3?: Addr | null;
    cw4: Addr;
    funds_distributor: Addr;
  };
} | {
  cw4_rewards: {
    cw3?: Addr | null;
    cw4: Addr;
    rewards: Addr;
  };
} | {
  fuzn: {
    gov_staking: Addr;
    voting_contract?: Addr | null;
    yfuzn_denom: string;
    yield_rewards: Addr;
    yield_staking: Addr;
  };
};
export type Duration = {
  height: number;
} | {
  time: number;
};
export type Denom = string;
export interface InstantiateMsg {
  fees: [Decimal, Addr][];
  options: AdapterOptions;
  owner: Addr;
  rewards_addr: Addr;
  stake_denom: Denom;
  unbond_min_interval: Duration;
}
export type ExecuteMsg = {
  bond: BondMsg;
} | {
  unbond: UnbondMsg;
} | {
  withdraw: WithdrawMsg;
} | {
  crank: {};
} | {
  update_config: {
    adapter?: AdapterUpdate | null;
    fees?: [Decimal, Addr][] | null;
    owner?: Addr | null;
    rewards_contract?: Addr | null;
    unbond_min_interval?: Duration | null;
  };
} | {
  callback: CallbackMsg;
};
export type CallbackData = string;
export type CallbackData1 = string;
export type CallbackData2 = string;
export type AdapterUpdate = {
  native: {
    unbonding_period?: Duration | null;
    update_slashed?: Uint128 | null;
    validators?: Addr[] | null;
  };
} | {
  cw4_funds: {
    staking_contract?: Addr | null;
    staking_rewards_contract?: Addr | null;
    voting_contract?: Addr | null;
  };
} | {
  cw4_rewards: {
    gov_staking_contract?: Addr | null;
    staking_rewards_contract?: Addr | null;
    voting_contract?: Addr | null;
    yield_staking_contract?: Addr | null;
  };
} | {
  fuzn: {};
};
export type Uint128 = string;
export type CallbackData3 = string;
export type Binary = string;
export interface BondMsg {
  callback?: CallbackData | null;
}
export interface UnbondMsg {
  callback?: CallbackData1 | null;
  recipient?: Addr | null;
}
export interface WithdrawMsg {
  callback?: CallbackData2 | null;
  recipient?: Addr | null;
}
export interface CallbackMsg {
  callback: CallbackData3;
  data: Binary;
}
export type QueryMsg = {
  config: {};
} | {
  pending_withdrawals: {
    address: Addr;
  };
} | {
  all_batches: {};
} | {
  rewards_state_dump: {};
};
export type BatchStatus = {
  pending: Expiration;
} | {
  unbonding: BatchAdapterMeta;
} | {
  done: BatchAdapterMeta;
};
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {};
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type BatchAdapterMeta = {
  simple: {
    release?: Expiration | null;
  };
} | {
  fuzn: {
    release?: Expiration | null;
    yield_release?: Expiration | null;
  };
} | "pruned";
export interface AllBatchesResponse {
  batches: BatchInfo[];
}
export interface BatchInfo {
  amount: Uint128;
  idx: Uint128;
  status: BatchStatus;
}
export interface ConfigResponse {
  adapter: AdapterOptions;
  fees: [Decimal, Addr][];
  owner: Addr;
  receipt_denom: Denom;
  rewards_addr: Addr;
  stake_denom: Denom;
  unbond_min_interval: Duration;
}
export interface PendingWithdrawalsResponse {
  withdrawals: WithdrawalInfo[];
}
export interface WithdrawalInfo {
  amount: Uint128;
  status: BatchStatus;
}